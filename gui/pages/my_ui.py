# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'my_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
 
"""
def plot_solution(self, solution):


        # Create a graph
        G = nx.Graph()
        
        # Add nodes
        nodes = [1,2,3,4,5,6,7] #self.cvrp_instance.get_customers
        G.add_nodes_from(nodes)

        # Add edges based on the given routes
        routes =  [[1, 2, 4, 6, 1], [1, 3, 5, 7, 1]]

        # Generate random edge colors in hexadecimal format for each route
        edge_colors = [f'#{random.randint(0, 0xFFFFFF):06x}' for _ in routes]

        all_edges = []  # Accumulate all edges for all routes

        # Draw all the accumulated edges with different colors for each route
        for idx, color in enumerate(edge_colors):
                route_edges = [edge for edge in all_edges if G.edges[edge]['color'] == color]
                scaled_route_edges = [(pos[edge[0]], pos[edge[1]]) for edge in route_edges]  # Scale edge positions
                lc = LineCollection(scaled_route_edges, colors=color, linewidths=0.8, alpha=0.7)
                self.ui.graph_canvas.axes.add_collection(lc)


        # Create a layout for the nodes
        pos = {node: (random.uniform(0, self.ui.graph_canvas.width()), random.uniform(0, self.ui.graph_canvas.height())) for node in G.nodes()}
        print()
        print("cavas width ", self.ui.graph_canvas.width())
        print("cavas height ", self.ui.graph_canvas.height())
        print()
        self.ui.graph_canvas.axes.cla()
        nx.draw_networkx_nodes(G, pos, node_size=3)

        

        # Draw all the accumulated edges with different colors for each route
        for idx, color in enumerate(edge_colors):
                route_edges = [edge for edge in all_edges if G.edges[edge]['color'] == color]
                nx.draw_networkx_edges(G, pos, edgelist=route_edges, edge_color=color, width=0.8)

        # Draw node labels
        nx.draw_networkx_labels(G, pos)

        # Set plot title
        #plt.title("Vehicle Routing Problem Routes with Random Hex Edge Colors")

        # Show the plot
        
        self.ui.graph_canvas.draw()
        
        
    
"""


"""
    def plot_solution(self, solution):
        # Create a graph
        G = nx.Graph()

        # Add nodes
        nodes = [1, 2, 3, 4, 5, 6, 7]  # Replace with your customer nodes
        G.add_nodes_from(nodes)

        # Add edges based on the given routes
        routes = [[1, 2, 4, 6, 1], [1, 3, 5, 7, 1]]  # Example routes

        # Generate a random edge color for all edges
        edge_color =  [f'#{random.randint(0, 0xFFFFFF):06x}' for _ in routes]

        # Create a layout for the nodes (you can customize this)
        pos = nx.spring_layout(G, seed=42)  # You can use a different layout algorithm

        # Clear the canvas
        self.ui.graph_canvas.axes.clear()

        # Draw the nodes
        nx.draw_networkx_nodes(G, pos, node_size=200, node_color='blue', ax=self.ui.graph_canvas.axes)

        # Draw the edges with the specified color
        for route in routes:
            edges = [(route[i], route[i + 1]) for i in range(len(route) - 1)]
            nx.draw_networkx_edges(G, pos, edgelist=edges, edge_color=edge_color, width=2, ax=self.ui.graph_canvas.axes)

        # Draw node labels
        nx.draw_networkx_labels(G, pos, font_size=12, font_color='black', ax=self.ui.graph_canvas.axes)

        # Set plot limits (you can adjust these)
        self.ui.graph_canvas.axes.set_xlim(-1.2, 1.2)
        self.ui.graph_canvas.axes.set_ylim(-1.2, 1.2)

        # Update the canvas
        self.ui.graph_canvas.draw()

"""

